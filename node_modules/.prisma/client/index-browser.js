
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  passwordHash: 'passwordHash',
  kycStatus: 'kycStatus',
  twoFaEnabled: 'twoFaEnabled',
  twoFaSecret: 'twoFaSecret',
  emailVerified: 'emailVerified',
  emailVerificationToken: 'emailVerificationToken',
  passwordResetToken: 'passwordResetToken',
  passwordResetExpires: 'passwordResetExpires',
  lastLogin: 'lastLogin',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  lastUsed: 'lastUsed',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isActive: 'isActive'
};

exports.Prisma.BrokerAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  broker: 'broker',
  accountType: 'accountType',
  name: 'name',
  apiKey: 'apiKey',
  apiSecret: 'apiSecret',
  passphrase: 'passphrase',
  isActive: 'isActive',
  balance: 'balance',
  pnl: 'pnl',
  lastSync: 'lastSync',
  winRate: 'winRate',
  totalTrades: 'totalTrades',
  followers: 'followers',
  riskLevel: 'riskLevel',
  monthlyReturn: 'monthlyReturn',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  masterAccountId: 'masterAccountId',
  followerAccountId: 'followerAccountId',
  multiplier: 'multiplier',
  maxPositionSize: 'maxPositionSize',
  dailyLossLimit: 'dailyLossLimit',
  isActive: 'isActive',
  pnl: 'pnl',
  totalTrades: 'totalTrades',
  winRate: 'winRate',
  monthlyReturn: 'monthlyReturn',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TradeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accountId: 'accountId',
  subscriptionId: 'subscriptionId',
  symbol: 'symbol',
  side: 'side',
  quantity: 'quantity',
  price: 'price',
  executedPrice: 'executedPrice',
  pnl: 'pnl',
  status: 'status',
  brokerTradeId: 'brokerTradeId',
  isCopyTrade: 'isCopyTrade',
  masterTradeId: 'masterTradeId',
  executionTime: 'executionTime',
  slippage: 'slippage',
  fees: 'fees',
  executedAt: 'executedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PositionScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  symbol: 'symbol',
  side: 'side',
  quantity: 'quantity',
  entryPrice: 'entryPrice',
  currentPrice: 'currentPrice',
  pnl: 'pnl',
  percentage: 'percentage',
  isOpen: 'isOpen',
  openedAt: 'openedAt',
  closedAt: 'closedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketDataScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  symbol: 'symbol',
  price: 'price',
  bid: 'bid',
  ask: 'ask',
  volume: 'volume',
  change24h: 'change24h',
  volume24h: 'volume24h',
  spread: 'spread',
  timestamp: 'timestamp'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  priority: 'priority',
  metadata: 'metadata',
  createdAt: 'createdAt',
  readAt: 'readAt'
};

exports.Prisma.PerformanceMetricScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accountId: 'accountId',
  date: 'date',
  totalPnL: 'totalPnL',
  winRate: 'winRate',
  totalTrades: 'totalTrades',
  avgTradeSize: 'avgTradeSize',
  maxDrawdown: 'maxDrawdown',
  sharpeRatio: 'sharpeRatio',
  monthlyReturn: 'monthlyReturn',
  bestTrade: 'bestTrade',
  worstTrade: 'worstTrade',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SystemHealthScalarFieldEnum = {
  id: 'id',
  service: 'service',
  status: 'status',
  message: 'message',
  responseTime: 'responseTime',
  checkedAt: 'checkedAt'
};

exports.Prisma.MasterTraderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  broker: 'broker',
  winRate: 'winRate',
  monthlyReturn: 'monthlyReturn',
  followers: 'followers',
  riskLevel: 'riskLevel',
  pnl: 'pnl',
  totalTrades: 'totalTrades',
  isActive: 'isActive',
  description: 'description',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.KycStatus = exports.$Enums.KycStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  UNDER_REVIEW: 'UNDER_REVIEW'
};

exports.Broker = exports.$Enums.Broker = {
  DELTA: 'DELTA',
  BINANCE: 'BINANCE',
  BYBIT: 'BYBIT',
  OKX: 'OKX'
};

exports.AccountType = exports.$Enums.AccountType = {
  MASTER: 'MASTER',
  FOLLOWER: 'FOLLOWER'
};

exports.RiskLevel = exports.$Enums.RiskLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

exports.TradeSide = exports.$Enums.TradeSide = {
  BUY: 'BUY',
  SELL: 'SELL'
};

exports.TradeStatus = exports.$Enums.TradeStatus = {
  PENDING: 'PENDING',
  EXECUTED: 'EXECUTED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  TRADE_EXECUTED: 'TRADE_EXECUTED',
  ACCOUNT_SYNC: 'ACCOUNT_SYNC',
  SUBSCRIPTION_UPDATE: 'SUBSCRIPTION_UPDATE',
  SYSTEM_ALERT: 'SYSTEM_ALERT',
  PERFORMANCE_UPDATE: 'PERFORMANCE_UPDATE',
  SECURITY_ALERT: 'SECURITY_ALERT'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.HealthStatus = exports.$Enums.HealthStatus = {
  HEALTHY: 'HEALTHY',
  DEGRADED: 'DEGRADED',
  UNHEALTHY: 'UNHEALTHY'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserSession: 'UserSession',
  BrokerAccount: 'BrokerAccount',
  Subscription: 'Subscription',
  Trade: 'Trade',
  Position: 'Position',
  MarketData: 'MarketData',
  Notification: 'Notification',
  PerformanceMetric: 'PerformanceMetric',
  AuditLog: 'AuditLog',
  SystemHealth: 'SystemHealth',
  MasterTrader: 'MasterTrader'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
